% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eClBreakBuild.R
\name{eCl.breakBuild}
\alias{eCl.breakBuild}
\title{Eigenvector Clustering with Optional Minimum Cluster Size}
\usage{
eCl.breakBuild(A, minSize = 1, normalize = FALSE, maxK = min(100, nrow(A)))
}
\arguments{
\item{A}{A symmetric \code{n x n} matrix on which clustering is
to be performed. Assumed to be a type of co-assocation matrix. That is,
higher values in \eqn{A_{ij}} imply that observations \eqn{i} and \eqn{j} are \strong{more} likely
to be in the same cluster.}

\item{minSize}{An integer specifying the minimum allowed cluster size. Defaults to 1.}

\item{normalize}{A logical value indicating whether to normalize \eqn{\Big(A_{Norm} = D_A^{-1/2}AD_A^{-1/2}\Big)} the matrix
before clustering. Defaults to \code{FALSE}.}

\item{maxK}{An integer \code{<= n} specifying that maximum possible number of clusters in the data.
Speeds computation. Default is min(100, n).}
}
\value{
A numeric vector of length \code{n} representing the cluster
assignment of each point.
}
\description{
This function performs eigenvector clustering on a given symmetric (co-association) matrix.
The function can optionally normalize the input matrix, and uses the reflection method to
break up clusters that should not be attached. The minimum allowable cluster size can
also be specified.
}
\details{
The function first checks that the input matrix \code{A} is square and symmetric.
If the \code{normalize} argument is set to \code{TRUE}, the function normalizes
the matrix by scaling it using the diagonal values. The function then performs an
eigendecomposition of the matrix and uses the resulting eigenvectors and
eigenvalues to cluster the data, breaking and building clusters as specified
by the break-build eigencluster method. If the \code{minSize} argument is greater than 1,
the function ensures that no cluster is smaller than the specified minimum size
by reassigning points from smaller clusters to the next closest option based on the eigendecomposition.
maxK allows the user to set an argument for maximum possible clusters. For datasets with a large
sample size this allows a much faster computation time. The default maxK is 100, and probably doesn't
need to be set much smaller than that in general.
}
\examples{
# Create a symmetric matrix
A <- matrix(runif(25), nrow = 5)
A <- (A + t(A)) / 2

# Perform clustering with default parameters and no thresholding
clust <- eCl.breakBuild(A)

# Perform clustering with minimum cluster size
clust <- eCl.breakBuild(A, minSize = 2)

}
